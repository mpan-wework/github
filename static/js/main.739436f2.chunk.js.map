{"version":3,"sources":["components/BlobViewer/Blob/Container.module.scss","components/BlobViewer/Path/Container.module.scss","views/BlobViewer.module.scss","components/BlobViewer/SideBar/TreeNode.module.scss","components/BlobViewer/SideBar/Container.module.scss","components/BlobViewer/Blob/Container.js","utils/store.js","service/api/github.js","components/BlobViewer/NavBar/Container.js","components/BlobViewer/Path/Container.js","components/BlobViewer/SideBar/TreeNode.js","components/BlobViewer/SideBar/Container.js","views/routes.js","views/BlobViewer.js","views/Github.js","App.js","serviceWorker.js","index.js","components/BlobViewer/NavBar/Container.module.scss"],"names":["module","exports","Container","props","blob","codeMirror","useRef","textArea","useState","code","setCode","resetCode","useCallback","content","window","atob","useEffect","current","CodeMirror","fromTextArea","mode","theme","smartIndent","lineWrapping","lineNumbers","readOnly","autofocus","getDoc","setValue","className","styles","onClick","ref","store","getItem","key","value","localStorage","location","pathname","setItem","get","uri","a","async","opts","url","test","fetch","headers","Authorization","resp","ok","json","console","error","githubClient","user","token","orgs","tree","owner","repo","branch","recursive","blobUrl","fetchData","setOwner","setToken","tokenChange","e","target","login","setTimeout","logout","tokenInput","type","placeholder","disabled","onChange","compButton","join","path","dirs","useMemo","split","map","dir","i","Fragment","slash","TreeNode","visitPath","onBlobClick","style","paddingLeft","depth","name","subs","sub","blobs","root","forEach","parentPath","pos","lastIndexOf","slice","parent","find","treeNode","replace","push","routes","component","setBlobs","setBlob","fetchTree","pathBlob","b","data","BlobViewer","sidebarWrapper","contentWrapper","Github","route","render","from","to","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.739436f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1xchs\",\"CodeMirror\":\"Container_CodeMirror__35fGV\",\"textArea\":\"Container_textArea__3rPsr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3yJhZ\",\"dir\":\"Container_dir__LCg2u\",\"slash\":\"Container_slash__2ed1z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BlobViewer\":\"BlobViewer_BlobViewer__3TjFI\",\"sidebarWrapper\":\"BlobViewer_sidebarWrapper__1w6UP\",\"contentWrapper\":\"BlobViewer_contentWrapper__1s9ME\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TreeNode\":\"TreeNode_TreeNode__3DTfP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__39U8O\"};","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport CodeMirror from 'codemirror';\nimport styles from './Container.module.scss';\n\nconst Container = (props) => {\n  const { blob } = props;\n\n  const codeMirror = useRef(null);\n  const textArea = useRef(null);\n\n  const [code, setCode] = useState('');\n\n  const resetCode = useCallback(\n    () => {\n      if (blob.content) {\n        setCode(window.atob(blob.content));\n      } else {\n        setCode('mike');\n      }\n    },\n    [blob, setCode],\n  );\n\n  useEffect(\n    () => {\n      if (codeMirror.current && !textArea.current) {\n        return;\n      }\n      codeMirror.current = CodeMirror.fromTextArea(\n        textArea.current,\n        {\n          mode: 'javascript',\n          theme: 'the-matrix',\n          smartIndent: true,\n          lineWrapping: true,\n          lineNumbers: true,\n          readOnly: true,\n          autofocus: true,\n        },\n      );\n    },\n    [textArea],\n  );\n\n  useEffect(\n    () => {\n      codeMirror.current && codeMirror.current.getDoc().setValue(code);\n    },\n    [codeMirror, code],\n  );\n\n  return (\n    <main className={styles.Container}>\n      <div onClick={resetCode}>Reset</div>\n      <div className={styles.CodeMirror}>\n        <textarea className={styles.textArea} ref={textArea} />\n      </div>\n    </main>\n  );\n};\n\nexport default Container;\n","const store = {\n  getItem: (key, value = null) => window.localStorage.getItem(`${window.location.pathname}:${key}`) || value,\n  setItem: (key, value) => window.localStorage.setItem(`${window.location.pathname}:${key}`, value),\n};\n\nexport default store;\n","import store from '../../utils/store';\n\nconst get = async (uri, opts = {}) => {\n  const url = /^https:/.test(uri) ? uri : `https://api.github.com${uri}`;\n  try {\n    const resp = await window.fetch(\n      url,\n      {\n        headers: {\n          Authorization: `token ${store.getItem('token')}`,\n          ...opts.headers,\n        },\n      },\n    );\n    return resp.ok ? resp.json() : null;\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n};\n\nconst createGithubClient = () => {\n  const user = async (token) => {\n    return get('/user', {\n      headers: { Authorization: `token ${token}`},\n    });\n  };\n\n  const orgs = async () => {\n    return get('/user/orgs');\n  };\n\n  const tree = async (owner, repo, branch, recursive = true) => {\n    return get(`/repos/${owner}/${repo}/git/trees/${branch}${recursive ? '?recursive=1' : ''}`);\n  };\n\n  const blob = async (blobUrl) => {\n    return get(blobUrl);\n  };\n\n  return {\n    user,\n    orgs,\n    tree,\n    blob,\n  };\n};\n\nconst githubClient = createGithubClient();\n\nexport default githubClient;","import React, { useCallback, useState } from 'react';\nimport store from '../../../utils/store';\nimport githubClient from '../../../service/api/github';\nimport styles from './Container.module.scss';\n\nconst Container = (props) => {\n  const { fetchData } = props;\n\n  const [owner, setOwner] = useState(null);\n  const [token, setToken] = useState(store.getItem('token', ''));\n\n  const tokenChange = useCallback(\n    (e) => {\n      setToken(e.target.value);\n    },\n    [setToken],\n  );\n\n  const login = useCallback(\n    async () => {\n      const user = await githubClient.user(token);\n      if (user) {\n        store.setItem('token', token);\n        setOwner(user);\n        setTimeout(fetchData, 0);\n      }\n    },\n    [token, setOwner, fetchData],\n  );\n\n  const logout = useCallback(\n    () => {\n      setOwner(null);\n    },\n    [setOwner],\n  );\n\n  return (\n    <div className={styles.Container}>\n      <input\n        className={styles.tokenInput}\n        type=\"text\"\n        placeholder=\"Personal Access Token\"\n        disabled={owner !== null}\n        onChange={tokenChange}\n        value={token}\n      />\n      {owner\n        ? (\n          <>\n            <div className={styles.owner}>{owner.login}</div>\n            <div\n              className={[styles.logout, styles.compButton].join(' ')}\n              onClick={logout}\n            >\n              Log Out\n            </div>\n          </>\n        )\n        : (\n          <div\n            className={[styles.login, styles.compButton].join(' ')}\n            onClick={login}\n          >\n            Log In\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default Container;\n","import React, { useMemo } from 'react';\nimport styles from './Container.module.scss';\n\nconst Container = (props) => {\n  const { path } = props;\n\n  const dirs = useMemo(\n    () => path.split('/'),\n    [path],\n  );\n\n  return (\n    <div className={styles.Container}>\n      {dirs.map((dir, i) => (\n        <React.Fragment key={`${i}${dir}`}>\n          <div className={styles.dir}>{dir}</div>\n          <div className={styles.slash}>&#47;</div>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default Container;\n","import React, { useCallback } from 'react';\nimport styles from './TreeNode.module.scss';\n\nconst TreeNode = (props) => {\n  const { tree, visitPath } = props;\n\n  const onBlobClick = useCallback(\n    () => {\n      visitPath(tree.path);\n    },\n    [tree, visitPath],\n  );\n\n  return (\n    <>\n      <div\n        className={styles.TreeNode}\n        onClick={onBlobClick}\n        style={{paddingLeft: `${0.5 * tree.depth}rem`}}\n      >\n        {tree.name}\n      </div>\n      {tree.subs.map((sub) => (\n        <TreeNode\n          key={sub.path}\n          tree={sub}\n          visitPath={visitPath}\n        />\n      ))}\n    </>\n  )\n}\n\nexport default TreeNode;\n","import React, { useMemo } from 'react';\nimport TreeNode from './TreeNode';\nimport styles from './Container.module.scss';\n\nconst Container = (props) => {\n  const { blobs, visitPath } = props;\n\n  const tree = useMemo(\n    () => {\n      const root = {\n        path: '/',\n        name: '/',\n        subs: [],\n        depth: 0,\n      };\n      const dirs = [root];\n      blobs.forEach((blob) => {\n        let parentPath = null;\n        const pos = blob.path.lastIndexOf('/');\n        if (pos === -1) {\n          parentPath = '';\n        } else {\n          parentPath = blob.path.slice(0, pos)\n        }\n        const parent = dirs.find((dir) => dir.path === parentPath);\n\n        const treeNode = {\n          ...blob,\n          name: blob.path.replace(/^.+\\//, ''),\n          subs: [],\n          depth: parent.depth + 1,\n        };\n        parent.subs.push(treeNode);\n        if (blob.type === 'tree') {\n          dirs.push(treeNode);\n        }\n      });\n      return root;\n    },\n    [blobs],\n  );\n\n  return (\n    <div className={styles.Container}>\n      <TreeNode tree={tree} visitPath={visitPath} />\n    </div>\n  );\n};\n\nexport default Container;\n","import BlobViewer from './BlobViewer';\n\nconst routes = [\n  {\n    path: '/blob-viewer',\n    component: BlobViewer,\n  },\n];\n\nexport default routes;\n","import React, { useCallback, useState } from 'react';\nimport Blob from '../components/BlobViewer/Blob/Container';\nimport NavBar from '../components/BlobViewer/NavBar/Container';\nimport Path from '../components/BlobViewer/Path/Container';\nimport SideBar from '../components/BlobViewer/SideBar/Container';\nimport githubClient from '../service/api/github';\nimport styles from './BlobViewer.module.scss';\n\nconst BlobViewer = () => {\n  const [owner] = useState('mpan-wework');\n  const [repo] = useState('github');\n  const [branch] = useState('master');\n  const [blobs, setBlobs] = useState([]);\n  const [blob, setBlob] = useState({});\n\n  const fetchTree = useCallback(\n    async () => {\n      const tree = await githubClient.tree(owner, repo, branch);\n      setBlobs(tree.tree);\n    },\n    [owner, repo, branch, setBlobs],\n  )\n\n  const fetchData = useCallback(\n    async () => {\n      await githubClient.orgs();\n      setTimeout(() => fetchTree(), 0);\n    },\n    [fetchTree],\n  );\n\n  const visitPath = useCallback(\n    async (path) => {\n      const pathBlob = blobs.find((b) => b.path === path);\n      if (pathBlob) {\n        const data = await githubClient.blob(pathBlob.url);\n        setBlob({ ...data, path })\n      } else {\n        setBlob({})\n      }\n    },\n    [blobs, setBlob],\n  );\n\n  return (\n    <div className={styles.BlobViewer}>\n      <div className={styles.sidebarWrapper}>\n        <SideBar\n          blobs={blobs}\n          blob={blob}\n          visitPath={visitPath}\n        />\n      </div>\n      <div className={styles.contentWrapper}>\n        <NavBar fetchData={fetchData} />\n        <Path\n          path={blob.path || ''}\n          visitPath={visitPath}\n        />\n        <Blob blob={blob} />\n      </div>\n    </div>\n  );\n};\n\nexport default BlobViewer;\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport routes from './routes';\n\nconst Github = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        {routes.map((route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            render={(props) => <route.component {...props} />}\n          />\n        ))}\n        <Redirect from=\"*\" to=\"/blob-viewer/\"/>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default Github;\n","import React from 'react';\nimport Github from './views/Github';\n\nconst App = () => <Github />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n          || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/codemirror/lib/codemirror.css';\nimport '../node_modules/codemirror/theme/the-matrix.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__13MpU\",\"tokenInput\":\"Container_tokenInput__2uTiS\",\"owner\":\"Container_owner__1gdhJ\",\"logout\":\"Container_logout__1fklQ\",\"login\":\"Container_login__z05_i\",\"compButton\":\"Container_compButton__3MFji\"};"],"sourceRoot":""}