{"version":3,"sources":["components/BlobViewer/Path/Path.module.scss","views/BlobViewer.module.scss","components/BlobViewer/Blob/Blob.module.scss","components/BlobViewer/SideBar/SideBar.module.scss","components/BlobViewer/Blob/Blob.js","utils/store.js","service/api/github.js","components/BlobViewer/NavBar/Container.js","components/BlobViewer/Path/Path.js","components/BlobViewer/SideBar/SideBar.js","views/routes.js","views/BlobViewer.js","views/Github.js","App.js","serviceWorker.js","index.js","components/BlobViewer/NavBar/Container.module.scss"],"names":["module","exports","Blob","props","blob","className","styles","window","atob","content","store","getItem","key","value","localStorage","location","pathname","setItem","get","uri","a","async","opts","url","test","fetch","headers","Authorization","resp","ok","json","console","error","githubClient","user","token","orgs","tree","owner","repo","branch","recursive","blobUrl","Container","fetchData","useState","setOwner","setToken","tokenChange","useCallback","e","target","login","setTimeout","logout","tokenInput","type","placeholder","disabled","onChange","compButton","join","onClick","Path","path","dirs","useMemo","split","map","dir","i","Fragment","slash","SideBar","blobs","fetchBlob","onBlobClick","find","b","routes","component","setBlobs","setBlob","fetchTree","data","BlobViewer","sidebarWrapper","contentWrapper","Github","route","render","from","to","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf5b3cb6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Path\":\"Path_Path__3ntTQ\",\"dir\":\"Path_dir__38aud\",\"slash\":\"Path_slash__9fPHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BlobViewer\":\"BlobViewer_BlobViewer__3TjFI\",\"sidebarWrapper\":\"BlobViewer_sidebarWrapper__1w6UP\",\"contentWrapper\":\"BlobViewer_contentWrapper__1s9ME\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blob\":\"Blob_Blob__3rmTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideBar\":\"SideBar_SideBar__3zTLE\"};","import React from 'react';\nimport styles from './Blob.module.scss';\n\nconst Blob = (props) => {\n  const { blob } = props;\n\n  return (\n    <main className={styles.Blob}>\n      <pre>\n        {window.atob(blob.content || 'aGVsbG8gd29ybGQ=')}\n      </pre>\n    </main>\n  );\n};\n\nexport default Blob;\n","const store = {\n  getItem: (key, value = null) => window.localStorage.getItem(`${window.location.pathname}:${key}`) || value,\n  setItem: (key, value) => window.localStorage.setItem(`${window.location.pathname}:${key}`, value),\n};\n\nexport default store;\n","import store from '../../utils/store';\n\nconst get = async (uri, opts = {}) => {\n  const url = /^https:/.test(uri) ? uri : `https://api.github.com${uri}`;\n  try {\n    const resp = await window.fetch(\n      url,\n      {\n        headers: {\n          Authorization: `token ${store.getItem('token')}`,\n          ...opts.headers,\n        },\n      },\n    );\n    return resp.ok ? resp.json() : null;\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n};\n\nconst createGithubClient = () => {\n  const user = async (token) => {\n    return get('/user', {\n      headers: { Authorization: `token ${token}`},\n    });\n  };\n\n  const orgs = async () => {\n    return get('/user/orgs');\n  };\n\n  const tree = async (owner, repo, branch, recursive = true) => {\n    return get(`/repos/${owner}/${repo}/git/trees/${branch}${recursive ? '?recursive=1' : ''}`);\n  };\n\n  const blob = async (blobUrl) => {\n    return get(blobUrl);\n  };\n\n  return {\n    user,\n    orgs,\n    tree,\n    blob,\n  };\n};\n\nconst githubClient = createGithubClient();\n\nexport default githubClient;","import React, { useCallback, useState } from 'react';\nimport store from '../../../utils/store';\nimport githubClient from '../../../service/api/github';\nimport styles from './Container.module.scss';\n\nconst Container = (props) => {\n  const { fetchData } = props;\n\n  const [owner, setOwner] = useState(null);\n  const [token, setToken] = useState(store.getItem('token', ''));\n\n  const tokenChange = useCallback(\n    (e) => {\n      setToken(e.target.value);\n    },\n    [setToken],\n  );\n\n  const login = useCallback(\n    async () => {\n      const user = await githubClient.user(token);\n      if (user) {\n        store.setItem('token', token);\n        setOwner(user);\n        setTimeout(fetchData, 0);\n      }\n    },\n    [token, setOwner, fetchData],\n  );\n\n  const logout = useCallback(\n    () => {\n      setOwner(null);\n    },\n    [setOwner],\n  );\n\n  return (\n    <div className={styles.Container}>\n      <input\n        className={styles.tokenInput}\n        type=\"text\"\n        placeholder=\"Personal Access Token\"\n        disabled={owner !== null}\n        onChange={tokenChange}\n        value={token}\n      />\n      {owner\n        ? (\n          <>\n            <div className={styles.owner}>{owner.login}</div>\n            <div\n              className={[styles.logout, styles.compButton].join(' ')}\n              onClick={logout}\n            >\n              Log Out\n            </div>\n          </>\n        )\n        : (\n          <div\n            className={[styles.login, styles.compButton].join(' ')}\n            onClick={login}\n          >\n            Log In\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default Container;\n","import React, { useMemo } from 'react';\nimport styles from './Path.module.scss';\n\nconst Path = (props) => {\n  const { path } = props;\n\n  const dirs = useMemo(\n    () => path.split('/'),\n    [path],\n  );\n\n  return (\n    <div className={styles.Path}>\n      {dirs.map((dir, i) => (\n        <React.Fragment key={`${i}${dir}`}>\n          <div className={styles.dir}>{dir}</div>\n          <div className={styles.slash}>&#47;</div>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default Path;\n","import React, { useCallback } from 'react';\nimport styles from './SideBar.module.scss';\n\nconst SideBar = (props) => {\n  const { blobs, path, fetchBlob } = props;\n\n  const onBlobClick = useCallback(\n    () => {\n      const blob = blobs.find((b) => b.path === path);\n      if (blob) {\n        fetchBlob(blob.url);\n      }\n    },\n    [blobs, path, fetchBlob],\n  );\n\n  return (\n    <div className={styles.SideBar}>\n      <div onClick={onBlobClick}>SideBar</div>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import BlobViewer from './BlobViewer';\n\nconst routes = [\n  {\n    path: '/blob-viewer',\n    component: BlobViewer,\n  },\n];\n\nexport default routes;\n","import React, { useCallback, useState } from 'react';\nimport Blob from '../components/BlobViewer/Blob/Blob';\nimport NavBar from '../components/BlobViewer/NavBar/Container';\nimport Path from '../components/BlobViewer/Path/Path';\nimport SideBar from '../components/BlobViewer/SideBar/SideBar';\nimport githubClient from '../service/api/github';\nimport styles from './BlobViewer.module.scss';\n\nconst BlobViewer = () => {\n  const [owner] = useState('mpan-wework');\n  const [repo] = useState('github');\n  const [branch] = useState('master');\n  const [blobs, setBlobs] = useState([]);\n  const [path] = useState('src/components/BlobViewer/Blob/Blob.js');\n  const [blob, setBlob] = useState({});\n\n  const fetchTree = useCallback(\n    async () => {\n      const tree = await githubClient.tree(owner, repo, branch);\n      setBlobs(tree.tree);\n    },\n    [owner, repo, branch, setBlobs],\n  )\n\n  const fetchData = useCallback(\n    async () => {\n      await githubClient.orgs();\n      setTimeout(() => fetchTree(), 0);\n    },\n    [fetchTree],\n  );\n\n  const fetchBlob = useCallback(\n    async (blobUrl) => {\n      const data = await githubClient.blob(blobUrl);\n      setBlob(data);\n    },\n    [],\n  )\n\n  return (\n    <div className={styles.BlobViewer}>\n      <div className={styles.sidebarWrapper}>\n        <SideBar\n          blobs={blobs}\n          fetchBlob={fetchBlob}\n          path={path}\n        />\n      </div>\n      <div className={styles.contentWrapper}>\n        <NavBar fetchData={fetchData} />\n        <Path path={path} />\n        <Blob blob={blob} />\n      </div>\n    </div>\n  );\n};\n\nexport default BlobViewer;\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport routes from './routes';\n\nconst Github = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        {routes.map((route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            render={(props) => <route.component {...props} />}\n          />\n        ))}\n        <Redirect from=\"*\" to=\"/blob-viewer/\"/>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default Github;\n","import React from 'react';\nimport Github from './views/Github';\n\nconst App = () => <Github />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n          || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__13MpU\",\"tokenInput\":\"Container_tokenInput__2uTiS\",\"owner\":\"Container_owner__1gdhJ\",\"logout\":\"Container_logout__1fklQ\",\"login\":\"Container_login__z05_i\",\"compButton\":\"Container_compButton__3MFji\"};"],"sourceRoot":""}