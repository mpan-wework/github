{"version":3,"sources":["components/NavBar/Container.module.scss","components/Github.module.scss","components/Blob.module.scss","components/Path.module.scss","components/SideBar.module.scss","components/Blob.js","utils/store.js","service/api/github.js","components/NavBar/Container.js","components/Path.js","components/SideBar.js","components/Github.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Blob","blob","className","styles","JSON","stringify","store","getItem","key","value","window","localStorage","location","pathname","setItem","get","uri","a","async","opts","fetch","headers","Authorization","resp","ok","json","console","error","githubClient","user","token","orgs","Container","props","fetchData","useState","owner","setOwner","setToken","tokenChange","useCallback","e","target","login","setTimeout","logout","tokenInput","type","placeholder","disabled","onChange","compButton","join","onClick","Path","SideBar","Github","info","sidebarWrapper","contentWrapper","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1af4ffbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__JiWj8\",\"tokenInput\":\"Container_tokenInput__2ZXGk\",\"owner\":\"Container_owner__1fBHn\",\"logout\":\"Container_logout__uq95M\",\"login\":\"Container_login__3OepB\",\"compButton\":\"Container_compButton__3Li1R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Github\":\"Github_Github__3uqL7\",\"sidebarWrapper\":\"Github_sidebarWrapper__tcKxe\",\"contentWrapper\":\"Github_contentWrapper__2snjc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blob\":\"Blob_Blob__2A6p-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Path\":\"Path_Path__2XYUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideBar\":\"SideBar_SideBar__1ONVA\"};","import React from 'react';\nimport styles from './Blob.module.scss';\n\nconst Blob = ({ blob }) => {\n  return (\n    <main className={styles.Blob}>\n      Blob:{JSON.stringify(blob || {})}\n    </main>\n  );\n};\n\nexport default Blob;\n","const store = {\n  getItem: (key, value = null) => window.localStorage.getItem(`${window.location.pathname}:${key}`) || value,\n  setItem: (key, value) => window.localStorage.setItem(`${window.location.pathname}:${key}`, value),\n};\n\nexport default store;\n","import store from '../../utils/store';\n\nconst get = async (uri, opts = {}) => {\n  try {\n    const resp = await window.fetch(\n      `https://api.github.com${uri}`,\n      {\n        headers: {\n          Authorization: `token ${store.getItem('token')}`,\n          ...opts.headers,\n        },\n      },\n    );\n    return resp.ok ? resp.json() : null;\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n};\n\nconst createGithubClient = () => {\n  const user = async (token) => {\n    return get('/user', {\n      headers: { Authorization: `token ${token}`},\n    });\n  };\n\n  const orgs = async () => {\n    return get('/user/orgs');\n  };\n\n  return {\n    user,\n    orgs,\n  };\n};\n\nconst githubClient = createGithubClient();\n\nexport default githubClient;","import React, { useCallback, useState } from 'react';\nimport store from '../../utils/store';\nimport githubClient from '../../service/api/github';\nimport styles from './Container.module.scss';\n\nconst Container = (props) => {\n  const { fetchData } = props;\n\n  const [owner, setOwner] = useState(null);\n  const [token, setToken] = useState(store.getItem('token', ''));\n\n  const tokenChange = useCallback(\n    (e) => {\n      setToken(e.target.value);\n    },\n    [setToken],\n  );\n\n  const login = useCallback(\n    async () => {\n      const user = await githubClient.user(token);\n      if (user) {\n        store.setItem('token', token);\n        setOwner(user);\n        setTimeout(fetchData, 0);\n      }\n    },\n    [token, setOwner, fetchData],\n  );\n\n  const logout = useCallback(\n    () => {\n      setOwner(null);\n    },\n    [setOwner],\n  );\n\n  return (\n    <div className={styles.Container}>\n      <input\n        className={styles.tokenInput}\n        type=\"text\"\n        placeholder=\"Personal Access Token\"\n        disabled={owner !== null}\n        onChange={tokenChange}\n        value={token}\n      />\n      {owner\n        ? (\n          <>\n            <div className={styles.owner}>{owner.login}</div>\n            <div\n              className={[styles.logout, styles.compButton].join(' ')}\n              onClick={logout}\n            >\n              Log Out\n            </div>\n          </>\n        )\n        : (\n          <div\n            className={[styles.login, styles.compButton].join(' ')}\n            onClick={login}\n          >\n            Log In\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport styles from './Path.module.scss';\n\nconst Path = () => {\n  return (\n    <div className={styles.Path}>\n      A / B / C\n    </div>\n  );\n};\n\nexport default Path;\n","import React from 'react';\nimport styles from './SideBar.module.scss';\n\nconst SideBar = () => {\n  return (\n    <div className={styles.SideBar}>\n      SideBar\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React, { useCallback } from 'react';\nimport Blob from './Blob';\nimport NavBar from './NavBar/Container';\nimport Path from './Path';\nimport SideBar from './SideBar';\nimport githubClient from '../service/api/github';\nimport styles from './Github.module.scss';\n\nconst Github = () => {\n  const fetchData = useCallback(\n    async () => {\n      const orgs = githubClient.orgs();\n      console.info(JSON.stringify(orgs));\n    },\n    [],\n  )\n  return (\n    <div className={styles.Github}>\n      <div className={styles.sidebarWrapper}>\n        <SideBar />\n      </div>\n      <div className={styles.contentWrapper}>\n        <NavBar fetchData={fetchData} />\n        <Path />\n        <Blob />\n      </div>\n    </div>\n  );\n};\n\nexport default Github;\n","import React from 'react';\nimport Github from './components/Github';\n\nconst App = () => <Github />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n          || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}