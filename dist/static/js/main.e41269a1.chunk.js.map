{"version":3,"sources":["components/Github.module.scss","components/Blob.module.scss","components/NavBar.module.scss","components/Path.module.scss","components/SideBar.module.scss","components/Blob.js","components/NavBar.js","components/Path.js","components/SideBar.js","components/Github.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Blob","blob","className","styles","JSON","stringify","NavBar","Path","SideBar","Github","sidebarWrapper","contentWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,eAAiB,+BAA+B,eAAiB,iC,kBCAnHD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,2B,uJCUbC,EARF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,0BAAMC,UAAWC,IAAOH,MAAxB,QACQI,KAAKC,UAAUJ,GAAQ,M,gBCGpBK,EANA,WACb,OACE,yBAAKJ,UAAWC,IAAOG,QAAvB,W,gBCMWC,EARF,WACX,OACE,yBAAKL,UAAWC,IAAOI,MAAvB,c,gBCMWC,EARC,WACd,OACE,yBAAKN,UAAWC,IAAOK,SAAvB,Y,gBCiBWC,EAfA,WACb,OACE,yBAAKP,UAAWC,IAAOM,QACrB,yBAAKP,UAAWC,IAAOO,gBACrB,kBAAC,EAAD,OAEF,yBAAKR,UAAWC,IAAOQ,gBACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCXOC,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.e41269a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Github\":\"Github_Github__3uqL7\",\"sidebarWrapper\":\"Github_sidebarWrapper__tcKxe\",\"contentWrapper\":\"Github_contentWrapper__2snjc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blob\":\"Blob_Blob__2A6p-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__3_gLK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Path\":\"Path_Path__2XYUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideBar\":\"SideBar_SideBar__1ONVA\"};","import React from 'react';\nimport styles from './Blob.module.scss';\n\nconst Blob = ({ blob }) => {\n  return (\n    <main className={styles.Blob}>\n      Blob:{JSON.stringify(blob || {})}\n    </main>\n  );\n};\n\nexport default Blob;\n","import React from 'react';\nimport styles from './NavBar.module.scss';\n\nconst NavBar = () => {\n  return (\n    <div className={styles.NavBar}>NavBar</div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport styles from './Path.module.scss';\n\nconst Path = () => {\n  return (\n    <div className={styles.Path}>\n      A / B / C\n    </div>\n  );\n};\n\nexport default Path;\n","import React from 'react';\nimport styles from './SideBar.module.scss';\n\nconst SideBar = () => {\n  return (\n    <div className={styles.SideBar}>\n      SideBar\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React from 'react';\nimport Blob from './Blob';\nimport NavBar from './NavBar';\nimport Path from './Path';\nimport SideBar from './SideBar';\nimport styles from './Github.module.scss';\n\nconst Github = () => {\n  return (\n    <div className={styles.Github}>\n      <div className={styles.sidebarWrapper}>\n        <SideBar />\n      </div>\n      <div className={styles.contentWrapper}>\n        <NavBar />\n        <Path />\n        <Blob />\n      </div>\n    </div>\n  );\n};\n\nexport default Github;\n","import React from 'react';\nimport Github from './components/Github';\n\nconst App = () => <Github />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n          || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}